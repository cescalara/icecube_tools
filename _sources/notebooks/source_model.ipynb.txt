{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bcb8790a",
   "metadata": {},
   "source": [
    "# Source model interface\n",
    "\n",
    "`icecube_tools` has a simple source modelling interface built in that we demonstrate here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "48c169ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-16T10:05:59.284953Z",
     "iopub.status.busy": "2022-08-16T10:05:59.284667Z",
     "iopub.status.idle": "2022-08-16T10:06:00.218387Z",
     "shell.execute_reply": "2022-08-16T10:06:00.217658Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "from icecube_tools.source.flux_model import PowerLawFlux, BrokenPowerLawFlux\n",
    "from icecube_tools.source.source_model import PointSource, DiffuseSource"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "221369f9",
   "metadata": {},
   "source": [
    "## Spectral shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffebf206",
   "metadata": {},
   "source": [
    "We start by defining a spectral shape, such as a power law or broken power law. Let's start with the definition of a simple power law flux."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "32e0a8e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-16T10:06:00.223151Z",
     "iopub.status.busy": "2022-08-16T10:06:00.222646Z",
     "iopub.status.idle": "2022-08-16T10:06:00.227852Z",
     "shell.execute_reply": "2022-08-16T10:06:00.227251Z"
    }
   },
   "outputs": [],
   "source": [
    "# Parameters of power law flux\n",
    "flux_norm = 1e-18  # Flux normalisation in units of GeV^-1 cm^-2 s^-1 (sr^-1)\n",
    "norm_energy = 1e5  # Energy of normalisation in units of GeV\n",
    "spectral_index = 2.0  # Assumed negative slope\n",
    "min_energy = 1e4  # GeV\n",
    "max_energy = 1e8  # GeV\n",
    "\n",
    "# Instantiate\n",
    "power_law = PowerLawFlux(flux_norm, norm_energy, spectral_index, min_energy, max_energy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8f4878b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-16T10:06:00.231288Z",
     "iopub.status.busy": "2022-08-16T10:06:00.230944Z",
     "iopub.status.idle": "2022-08-16T10:06:00.821780Z",
     "shell.execute_reply": "2022-08-16T10:06:00.821003Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'F [GeV^-1 cm^-2 s^-1 (sr^-1)]')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.geomspace(min_energy, max_energy)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(energies, [power_law.spectrum(e) for e in energies])\n",
    "ax.axhline(flux_norm, color=\"k\", linestyle=\":\")\n",
    "ax.axvline(norm_energy, color=\"k\", linestyle=\":\")\n",
    "ax.set_xscale(\"log\")\n",
    "ax.set_yscale(\"log\")\n",
    "ax.set_xlabel(\"E [GeV]\")\n",
    "ax.set_ylabel(\"F [GeV^-1 cm^-2 s^-1 (sr^-1)]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "524189a9",
   "metadata": {},
   "source": [
    "We can also use the `PowerLawFlux` class to perform some simple calculations, such as integration of the flux."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "711eb180",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-16T10:06:00.825461Z",
     "iopub.status.busy": "2022-08-16T10:06:00.824875Z",
     "iopub.status.idle": "2022-08-16T10:06:00.829949Z",
     "shell.execute_reply": "2022-08-16T10:06:00.829249Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.999000000000002e-13"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_flux = power_law.integrated_spectrum(min_energy, max_energy)  # cm^-2 s^-1 (sr^-1)\n",
    "total_flux"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03b15909",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-16T10:06:00.833261Z",
     "iopub.status.busy": "2022-08-16T10:06:00.832646Z",
     "iopub.status.idle": "2022-08-16T10:06:00.837422Z",
     "shell.execute_reply": "2022-08-16T10:06:00.836778Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.210340371976182e-08"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_energy_flux = power_law.total_flux_density()  # GeV cm^-2 s^-1 (sr^-1)\n",
    "total_energy_flux"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "818050bd",
   "metadata": {},
   "source": [
    "Sampling from the power law shape is also possible:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "80379b99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-16T10:06:00.841075Z",
     "iopub.status.busy": "2022-08-16T10:06:00.840475Z",
     "iopub.status.idle": "2022-08-16T10:06:01.503479Z",
     "shell.execute_reply": "2022-08-16T10:06:01.502576Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f1b73841fd0>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "samples = power_law.sample(1000)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.hist(samples, bins=energies, density=True, label=\"Samples\")\n",
    "ax.plot(energies, [power_law.spectrum(e) / total_flux for e in energies], label=\"Model\")\n",
    "ax.set_xscale(\"log\")\n",
    "ax.set_yscale(\"log\")\n",
    "ax.set_xlabel(\"E [GeV]\")\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e47be1cf",
   "metadata": {},
   "source": [
    "The `BrokenPowerLaw` class is also available and behaves in a very similar way."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5496949",
   "metadata": {},
   "source": [
    "## Diffuse and point sources\n",
    "\n",
    "Once the spectral shape is defined, we can specify either a `DiffuseSource` or a `PointSource`. It is assumed that diffuse sources are isotropic and the flux model describes the per-steradian flux over the entire $4\\pi$ sky. We also specify a redshift of the source such that adiabatic neutrino energy losses can be accounted for. Naturally, `PointSource` objects also have a direction specified in (ra, dec) coordinates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "43e3aae5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-16T10:06:01.507140Z",
     "iopub.status.busy": "2022-08-16T10:06:01.506494Z",
     "iopub.status.idle": "2022-08-16T10:06:01.510835Z",
     "shell.execute_reply": "2022-08-16T10:06:01.510146Z"
    }
   },
   "outputs": [],
   "source": [
    "diffuse_source = DiffuseSource(power_law, z=0.0)\n",
    "\n",
    "ra = np.deg2rad(50)\n",
    "dec = np.deg2rad(-10)\n",
    "point_source = PointSource(power_law, z=0.5, coord=(ra, dec))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dce7b12",
   "metadata": {},
   "source": [
    "The original flux model can now be accessed from within the source along with its other properties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a2335cac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-16T10:06:01.513749Z",
     "iopub.status.busy": "2022-08-16T10:06:01.513523Z",
     "iopub.status.idle": "2022-08-16T10:06:01.518149Z",
     "shell.execute_reply": "2022-08-16T10:06:01.517493Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<icecube_tools.source.flux_model.PowerLawFlux at 0x7f1bacc7e7c0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diffuse_source.flux_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "619864fd",
   "metadata": {},
   "source": [
    "Sources and lists of sources can be used as input to simulations, as demonstrated in the simulation notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15379815",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
