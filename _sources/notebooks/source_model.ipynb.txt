{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d37ee2db",
   "metadata": {},
   "source": [
    "# Source model interface\n",
    "\n",
    "`icecube_tools` has a simple source modelling interface built in that we demonstrate here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "aa621025",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:21:26.570895Z",
     "iopub.status.busy": "2021-12-30T21:21:26.570266Z",
     "iopub.status.idle": "2021-12-30T21:21:27.689866Z",
     "shell.execute_reply": "2021-12-30T21:21:27.689260Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "from icecube_tools.source.flux_model import PowerLawFlux, BrokenPowerLawFlux\n",
    "from icecube_tools.source.source_model import PointSource, DiffuseSource"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bd78bcb",
   "metadata": {},
   "source": [
    "## Spectral shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90dc0929",
   "metadata": {},
   "source": [
    "We start by defining a spectral shape, such as a power law or broken power law. Let's start with the definition of a simple power law flux."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ab746b6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:21:27.694884Z",
     "iopub.status.busy": "2021-12-30T21:21:27.694350Z",
     "iopub.status.idle": "2021-12-30T21:21:27.697689Z",
     "shell.execute_reply": "2021-12-30T21:21:27.697233Z"
    }
   },
   "outputs": [],
   "source": [
    "# Parameters of power law flux\n",
    "flux_norm = 1e-18  # Flux normalisation in units of GeV^-1 cm^-2 s^-1 (sr^-1)\n",
    "norm_energy = 1e5  # Energy of normalisation in units of GeV\n",
    "spectral_index = 2.0  # Assumed negative slope\n",
    "min_energy = 1e4  # GeV\n",
    "max_energy = 1e8  # GeV\n",
    "\n",
    "# Instantiate\n",
    "power_law = PowerLawFlux(flux_norm, norm_energy, spectral_index, min_energy, max_energy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9886c034",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:21:27.716299Z",
     "iopub.status.busy": "2021-12-30T21:21:27.705780Z",
     "iopub.status.idle": "2021-12-30T21:21:28.262515Z",
     "shell.execute_reply": "2021-12-30T21:21:28.262043Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'F [GeV^-1 cm^-2 s^-1 (sr^-1)]')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.geomspace(min_energy, max_energy)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(energies, [power_law.spectrum(e) for e in energies])\n",
    "ax.axhline(flux_norm, color=\"k\", linestyle=\":\")\n",
    "ax.axvline(norm_energy, color=\"k\", linestyle=\":\")\n",
    "ax.set_xscale(\"log\")\n",
    "ax.set_yscale(\"log\")\n",
    "ax.set_xlabel(\"E [GeV]\")\n",
    "ax.set_ylabel(\"F [GeV^-1 cm^-2 s^-1 (sr^-1)]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50d99b26",
   "metadata": {},
   "source": [
    "We can also use the `PowerLawFlux` class to perform some simple calculations, such as integration of the flux."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "43b33f13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:21:28.267774Z",
     "iopub.status.busy": "2021-12-30T21:21:28.267235Z",
     "iopub.status.idle": "2021-12-30T21:21:28.275953Z",
     "shell.execute_reply": "2021-12-30T21:21:28.275475Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.999000000000002e-13"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_flux = power_law.integrated_spectrum(min_energy, max_energy)  # cm^-2 s^-1 (sr^-1)\n",
    "total_flux"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6257629e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:21:28.281166Z",
     "iopub.status.busy": "2021-12-30T21:21:28.280606Z",
     "iopub.status.idle": "2021-12-30T21:21:28.283411Z",
     "shell.execute_reply": "2021-12-30T21:21:28.283841Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.210340371976182e-08"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_energy_flux = power_law.total_flux_density()  # GeV cm^-2 s^-1 (sr^-1)\n",
    "total_energy_flux"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1abd516b",
   "metadata": {},
   "source": [
    "Sampling from the power law shape is also possible:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "107fad85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:21:28.288563Z",
     "iopub.status.busy": "2021-12-30T21:21:28.286099Z",
     "iopub.status.idle": "2021-12-30T21:21:28.925336Z",
     "shell.execute_reply": "2021-12-30T21:21:28.924833Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fa179f9df10>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "samples = power_law.sample(1000)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.hist(samples, bins=energies, density=True, label=\"Samples\")\n",
    "ax.plot(energies, [power_law.spectrum(e) / total_flux for e in energies], label=\"Model\")\n",
    "ax.set_xscale(\"log\")\n",
    "ax.set_yscale(\"log\")\n",
    "ax.set_xlabel(\"E [GeV]\")\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf2544ac",
   "metadata": {},
   "source": [
    "The `BrokenPowerLaw` class is also available and behaves in a very similar way."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d124d1b",
   "metadata": {},
   "source": [
    "## Diffuse and point sources\n",
    "\n",
    "Once the spectral shape is defined, we can specify either a `DiffuseSource` or a `PointSource`. It is assumed that diffuse sources are isotropic and the flux model describes the per-steradian flux over the entire $4\\pi$ sky. We also specify a redshift of the source such that adiabatic neutrino energy losses can be accounted for. Naturally, `PointSource` objects also have a direction specified in (ra, dec) coordinates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a0346fa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:21:28.930349Z",
     "iopub.status.busy": "2021-12-30T21:21:28.929819Z",
     "iopub.status.idle": "2021-12-30T21:21:28.933187Z",
     "shell.execute_reply": "2021-12-30T21:21:28.932732Z"
    }
   },
   "outputs": [],
   "source": [
    "diffuse_source = DiffuseSource(power_law, z=0.0)\n",
    "\n",
    "ra = np.deg2rad(50)\n",
    "dec = np.deg2rad(-10)\n",
    "point_source = PointSource(power_law, z=0.5, coord=(ra, dec))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec916490",
   "metadata": {},
   "source": [
    "The original flux model can now be accessed from within the source along with its other properties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0492432d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:21:28.938764Z",
     "iopub.status.busy": "2021-12-30T21:21:28.937850Z",
     "iopub.status.idle": "2021-12-30T21:21:28.940536Z",
     "shell.execute_reply": "2021-12-30T21:21:28.940942Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<icecube_tools.source.flux_model.PowerLawFlux at 0x7fa17c32f8e0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diffuse_source.flux_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9e6e613",
   "metadata": {},
   "source": [
    "Sources and lists of sources can be used as input to simulations, as demonstrated in the simulation notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0077122e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
