{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "05b58c39",
   "metadata": {},
   "source": [
    "# Source model interface\n",
    "\n",
    "`icecube_tools` has a simple source modelling interface built in that we demonstrate here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e9d5c8c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:30:47.759717Z",
     "iopub.status.busy": "2021-12-30T21:30:47.759094Z",
     "iopub.status.idle": "2021-12-30T21:30:48.749890Z",
     "shell.execute_reply": "2021-12-30T21:30:48.749281Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "from icecube_tools.source.flux_model import PowerLawFlux, BrokenPowerLawFlux\n",
    "from icecube_tools.source.source_model import PointSource, DiffuseSource"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3193a4bb",
   "metadata": {},
   "source": [
    "## Spectral shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a0b006b",
   "metadata": {},
   "source": [
    "We start by defining a spectral shape, such as a power law or broken power law. Let's start with the definition of a simple power law flux."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "41a010ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:30:48.754482Z",
     "iopub.status.busy": "2021-12-30T21:30:48.754017Z",
     "iopub.status.idle": "2021-12-30T21:30:48.756653Z",
     "shell.execute_reply": "2021-12-30T21:30:48.757018Z"
    }
   },
   "outputs": [],
   "source": [
    "# Parameters of power law flux\n",
    "flux_norm = 1e-18  # Flux normalisation in units of GeV^-1 cm^-2 s^-1 (sr^-1)\n",
    "norm_energy = 1e5  # Energy of normalisation in units of GeV\n",
    "spectral_index = 2.0  # Assumed negative slope\n",
    "min_energy = 1e4  # GeV\n",
    "max_energy = 1e8  # GeV\n",
    "\n",
    "# Instantiate\n",
    "power_law = PowerLawFlux(flux_norm, norm_energy, spectral_index, min_energy, max_energy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4fc9af98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:30:48.765564Z",
     "iopub.status.busy": "2021-12-30T21:30:48.762071Z",
     "iopub.status.idle": "2021-12-30T21:30:49.261220Z",
     "shell.execute_reply": "2021-12-30T21:30:49.261617Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'F [GeV^-1 cm^-2 s^-1 (sr^-1)]')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.geomspace(min_energy, max_energy)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(energies, [power_law.spectrum(e) for e in energies])\n",
    "ax.axhline(flux_norm, color=\"k\", linestyle=\":\")\n",
    "ax.axvline(norm_energy, color=\"k\", linestyle=\":\")\n",
    "ax.set_xscale(\"log\")\n",
    "ax.set_yscale(\"log\")\n",
    "ax.set_xlabel(\"E [GeV]\")\n",
    "ax.set_ylabel(\"F [GeV^-1 cm^-2 s^-1 (sr^-1)]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfee40af",
   "metadata": {},
   "source": [
    "We can also use the `PowerLawFlux` class to perform some simple calculations, such as integration of the flux."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "084c34a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:30:49.266008Z",
     "iopub.status.busy": "2021-12-30T21:30:49.265549Z",
     "iopub.status.idle": "2021-12-30T21:30:49.270126Z",
     "shell.execute_reply": "2021-12-30T21:30:49.269724Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.999000000000002e-13"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_flux = power_law.integrated_spectrum(min_energy, max_energy)  # cm^-2 s^-1 (sr^-1)\n",
    "total_flux"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f036d53a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:30:49.274008Z",
     "iopub.status.busy": "2021-12-30T21:30:49.273565Z",
     "iopub.status.idle": "2021-12-30T21:30:49.277880Z",
     "shell.execute_reply": "2021-12-30T21:30:49.277490Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.210340371976182e-08"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_energy_flux = power_law.total_flux_density()  # GeV cm^-2 s^-1 (sr^-1)\n",
    "total_energy_flux"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84ff4360",
   "metadata": {},
   "source": [
    "Sampling from the power law shape is also possible:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "53f5d073",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:30:49.282658Z",
     "iopub.status.busy": "2021-12-30T21:30:49.282208Z",
     "iopub.status.idle": "2021-12-30T21:30:49.811865Z",
     "shell.execute_reply": "2021-12-30T21:30:49.811405Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f03f7437e80>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "samples = power_law.sample(1000)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.hist(samples, bins=energies, density=True, label=\"Samples\")\n",
    "ax.plot(energies, [power_law.spectrum(e) / total_flux for e in energies], label=\"Model\")\n",
    "ax.set_xscale(\"log\")\n",
    "ax.set_yscale(\"log\")\n",
    "ax.set_xlabel(\"E [GeV]\")\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbc07936",
   "metadata": {},
   "source": [
    "The `BrokenPowerLaw` class is also available and behaves in a very similar way."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "085ef5fe",
   "metadata": {},
   "source": [
    "## Diffuse and point sources\n",
    "\n",
    "Once the spectral shape is defined, we can specify either a `DiffuseSource` or a `PointSource`. It is assumed that diffuse sources are isotropic and the flux model describes the per-steradian flux over the entire $4\\pi$ sky. We also specify a redshift of the source such that adiabatic neutrino energy losses can be accounted for. Naturally, `PointSource` objects also have a direction specified in (ra, dec) coordinates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e494eb8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:30:49.816636Z",
     "iopub.status.busy": "2021-12-30T21:30:49.816110Z",
     "iopub.status.idle": "2021-12-30T21:30:49.818841Z",
     "shell.execute_reply": "2021-12-30T21:30:49.819186Z"
    }
   },
   "outputs": [],
   "source": [
    "diffuse_source = DiffuseSource(power_law, z=0.0)\n",
    "\n",
    "ra = np.deg2rad(50)\n",
    "dec = np.deg2rad(-10)\n",
    "point_source = PointSource(power_law, z=0.5, coord=(ra, dec))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14b651f1",
   "metadata": {},
   "source": [
    "The original flux model can now be accessed from within the source along with its other properties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b989c150",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-12-30T21:30:49.823817Z",
     "iopub.status.busy": "2021-12-30T21:30:49.823347Z",
     "iopub.status.idle": "2021-12-30T21:30:49.825650Z",
     "shell.execute_reply": "2021-12-30T21:30:49.826013Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<icecube_tools.source.flux_model.PowerLawFlux at 0x7f03f97c7820>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diffuse_source.flux_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4940463e",
   "metadata": {},
   "source": [
    "Sources and lists of sources can be used as input to simulations, as demonstrated in the simulation notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5aac23b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
